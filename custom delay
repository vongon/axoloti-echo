<patch-1.0 appVersion="">
   <obj type="kfilter/lowpass" uuid="4f0d68b39b6f6b1c1d371b028d84391d14062d68" name="lowpass_1" x="1008" y="84">
      <params>
         <frac32.s.map name="freq" value="32.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_1" x="1120" y="84">
      <params/>
      <attribs/>
   </obj>
   <obj type="patch/inlet a" uuid="b577fe41e0a6bc7b5502ce33cb8a3129e2e28ee5" name="audio_input" x="84" y="98">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/+" uuid="faedbea4612d9bd3644d6d3bf31946d848a70e19" name="+_2" x="420" y="98">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="a9115f25-b5f1-4623-9234-921968a9367a" name="echo" x="518" y="98">
      <params/>
      <attribs>
         <combo attributeName="size" selection="1048576 (21.8s)"/>
      </attribs>
      <object id="patch/object" uuid="a9115f25-b5f1-4623-9234-921968a9367a">
         <sDescription>delayline definition, read it with &quot;delay/read&quot; objects referencing the instance name of this object</sDescription>
         <author>Johannes Taelman, Jan Hofmann</author>
         <license>BSD</license>
         <helpPatch>delay.axh</helpPatch>
         <inlets>
            <frac32buffer name="in" description="wave input"/>
            <frac32buffer name="time"/>
            <int32 name="range"/>
            <bool32.rising name="clearBuffer"/>
         </inlets>
         <outlets>
            <frac32buffer name="out1"/>
            <frac32buffer name="out2"/>
            <frac32buffer name="out3"/>
            <frac32buffer name="out4"/>
            <frac32buffer name="out5"/>
            <frac32buffer name="out6"/>
            <frac32buffer name="out7"/>
            <frac32buffer name="out8"/>
            <frac32buffer name="out9"/>
            <bool32 name="blink"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <combo name="size">
               <MenuEntries>
                  <string>256 (5.33ms)</string>
                  <string>512 (10.66ms)</string>
                  <string>1024 (21.33ms)</string>
                  <string>2048 (42.66ms)</string>
                  <string>4096 (85.33ms)</string>
                  <string>8192 (170ms)</string>
                  <string>16384 (341ms)</string>
                  <string>32768 (682ms)</string>
                  <string>65536 (1.36s)</string>
                  <string>131072 (2.37s)</string>
                  <string>262144 (5.46s)</string>
                  <string>524288 (10.9s)</string>
                  <string>1048576 (21.8s)</string>
               </MenuEntries>
               <CEntries>
                  <string>8</string>
                  <string>9</string>
                  <string>10</string>
                  <string>11</string>
                  <string>12</string>
                  <string>13</string>
                  <string>14</string>
                  <string>15</string>
                  <string>16</string>
                  <string>17</string>
                  <string>18</string>
                  <string>19</string>
                  <string>20</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[static const uint32_t LENGTHPOW = (attr_size);
static const uint32_t LENGTH = (1<<attr_size);
static const uint32_t LENGTHMASK = ((1<<attr_size)-1);

static const uint32_t LENGTHPOW2 = (attr_size-1);
static const uint32_t LENGTH2 = (1<<(attr_size-1));
static const uint32_t LENGTHMASK2 = ((1<<(attr_size-1))-1);

static const uint32_t LENGTHPOW3 = (attr_size-2);
static const uint32_t LENGTH3 = (1<<(attr_size-2));
static const uint32_t LENGTHMASK3 = ((1<<(attr_size-2))-1);

static const uint32_t LENGTHPOW4 = (attr_size-3);
static const uint32_t LENGTH4 = (1<<(attr_size-3));
static const uint32_t LENGTHMASK4 = ((1<<(attr_size-3))-1);

static const uint32_t LENGTHPOW5 = (attr_size-4);
static const uint32_t LENGTH5 = (1<<(attr_size-4));
static const uint32_t LENGTHMASK5 = ((1<<(attr_size-4))-1);

static const uint32_t LENGTHPOW6 = (attr_size-5);
static const uint32_t LENGTH6 = (1<<(attr_size-5));
static const uint32_t LENGTHMASK6 = ((1<<(attr_size-5))-1);

static const uint32_t LENGTHPOW7 = (attr_size-6);
static const uint32_t LENGTH7 = (1<<(attr_size-6));
static const uint32_t LENGTHMASK7 = ((1<<(attr_size-6))-1);

static const uint32_t LENGTHPOW8 = (attr_size-7);
static const uint32_t LENGTH8 = (1<<(attr_size-7));
static const uint32_t LENGTHMASK8 = ((1<<(attr_size-7))-1);

static const uint32_t LENGTHPOW9 = (attr_size-8);
static const uint32_t LENGTH9 = (1<<(attr_size-8));
static const uint32_t LENGTHMASK9 = ((1<<(attr_size-8))-1);

int32_t *array;
uint32_t writepos;
uint32_t idx_offset;
int32_t delay_output;
bool prev_clearBuffer = false;

//int32_t get_sample(uint32_t tmp_d, uint32_t writepos, uint32_t lengthpow, uint32_t lengthmask){
//	// index offset
//	uint32_t idx_offset = (tmp_d>>(27-lengthpow)); //range from 0 to index count in table (ie 32768, etc)
//
//	// read index
//	uint32_t tmp_di = writepos - idx_offset;
//
//	// time values needed for interpolation
//	uint32_t tmp_w1 = (tmp_d<<(lengthpow+3)) & 0x3FFFFFFF;
//	uint32_t tmp_w2 = (1<<30) - tmp_w1;
//
//	// get 2 values to interpolate between
//	int32_t tmp_a1 = array[tmp_di&lengthmask]; // length mask is valid even when tmp_di is negative
//	int32_t tmp_a2 = array[(tmp_di+1)&lengthmask];
//
//	// interpolation
//	int32_t tmp_r = ___SMMUL(tmp_a1,tmp_w1); //tmp_a1 * tmp_w1
//	tmp_r = ___SMMLA(tmp_a2,tmp_w2,tmp_r); //(tmp_a2 * tmp_w2) + tmp_r
//
//	int32_t delay_output = tmp_r << 2;
//	return delay_output;
//}

bool blink = false;
uint32_t counter = 0;
uint32_t range = 0;

int32_t get_sample(uint32_t tmp_d, uint32_t writepos, uint32_t lengthpow, uint32_t lengthmask, uint32_t ouput_range){
	// index offset
	uint32_t idx_offset = (tmp_d>>(27-lengthpow)); //range from 0 to index count in table (ie 32768, etc)

	// read index
	uint32_t tmp_di = writepos - idx_offset;

	if(range == ouput_range){
		counter++;
		if(counter > idx_offset){
			blink = true;
			counter = 0;
		}
	}

	// time values needed for interpolation
	uint32_t tmp_w1 = (tmp_d<<(lengthpow+3)) & 0x3FFFFFFF;
	uint32_t tmp_w2 = (1<<30) - tmp_w1;

	// get 2 values to interpolate between
	int32_t tmp_a1 = array[tmp_di&lengthmask]; // length mask is valid even when tmp_di is negative
	int32_t tmp_a2 = array[(tmp_di+1)&lengthmask];

	// interpolation
	int32_t tmp_r = ___SMMUL(tmp_a1,tmp_w1); //tmp_a1 * tmp_w1
	tmp_r = ___SMMLA(tmp_a2,tmp_w2,tmp_r); //(tmp_a2 * tmp_w2) + tmp_r


	int32_t delay_output = tmp_r << 2;
	return delay_output;
}

void clear_buffer(){
	for(int i=0;i<LENGTH;i++){
		array[i] = 0;	
	}
}]]></code.declaration>
         <code.init><![CDATA[static int32_t _array[attr_poly][1<<attr_size]  __attribute__ ((section (".sdram")));
array = &_array[parent->polyIndex][0];
int i;
writepos = 0;
idx_offset = 0;
delay_output = 0;
for(i=0;i<LENGTH;i++) array[i] = 0;]]></code.init>
         <code.krate><![CDATA[range = inlet_range;
outlet_blink = blink;
if(blink){
	blink = false;
}
if(inlet_clearBuffer && !prev_clearBuffer){
	clear_buffer();
}
prev_clearBuffer = inlet_clearBuffer;]]></code.krate>
         <code.srate><![CDATA[writepos = (writepos + 1)&LENGTHMASK;
array[writepos] = inlet_in;



// -- Delay Read --//

uint32_t tmp_d =  __USAT(inlet_time,27); //range from 0 to 2^27

outlet_out1 = get_sample(tmp_d, writepos, LENGTHPOW,  LENGTHMASK, 8);
outlet_out2 = get_sample(tmp_d, writepos, LENGTHPOW2, LENGTHMASK, 7);
outlet_out3 = get_sample(tmp_d, writepos, LENGTHPOW3, LENGTHMASK, 6);
outlet_out4 = get_sample(tmp_d, writepos, LENGTHPOW4, LENGTHMASK, 5);
outlet_out5 = get_sample(tmp_d, writepos, LENGTHPOW5, LENGTHMASK, 4);
outlet_out6 = get_sample(tmp_d, writepos, LENGTHPOW6, LENGTHMASK, 3);
outlet_out7 = get_sample(tmp_d, writepos, LENGTHPOW7, LENGTHMASK, 2);
outlet_out8 = get_sample(tmp_d, writepos, LENGTHPOW8, LENGTHMASK, 1);
outlet_out9 = get_sample(tmp_d, writepos, LENGTHPOW9, LENGTHMASK, 0);]]></code.srate>
      </object>
   </patchobj>
   <obj type="patch/outlet b" uuid="191792f616d4835dba0b55375474a12942e5bcbd" name="blink" x="1428" y="98">
      <params/>
      <attribs/>
   </obj>
   <obj type="patch/inlet a" uuid="b577fe41e0a6bc7b5502ce33cb8a3129e2e28ee5" name="fb_rtn" x="84" y="168">
      <params/>
      <attribs/>
   </obj>
   <obj type="kfilter/lowpass" uuid="4f0d68b39b6f6b1c1d371b028d84391d14062d68" name="lowpass_2" x="1008" y="210">
      <params>
         <frac32.s.map name="freq" value="32.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_2" x="1120" y="210">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="4b0f76a4-1f7d-4d00-b2c1-f5ea432ccc1f" name="+_9" x="1288" y="210">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="4b0f76a4-1f7d-4d00-b2c1-f5ea432ccc1f">
         <sDescription>add</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>math.axh</helpPatch>
         <inlets>
            <frac32buffer name="in1" description="in2"/>
            <frac32buffer name="in2"/>
            <frac32buffer name="in3"/>
            <frac32buffer name="in4"/>
            <frac32buffer name="in5"/>
            <frac32buffer name="in6"/>
            <frac32buffer name="in7"/>
            <frac32buffer name="in8"/>
            <frac32buffer name="in9"/>
         </inlets>
         <outlets>
            <frac32buffer name="out" description="out"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.srate><![CDATA[outlet_out= inlet_in1+inlet_in2+inlet_in3+inlet_in4+inlet_in5+inlet_in6+inlet_in7+inlet_in8+inlet_in9;]]></code.srate>
      </object>
   </patchobj>
   <obj type="patch/outlet a" uuid="abd8c5fd3b0524a6630f65cad6dc27f6c58e2a3e" name="audio_output" x="1428" y="210">
      <params/>
      <attribs/>
   </obj>
   <obj type="patch/inlet f" uuid="5c585d2dcd9c05631e345ac09626a22a639d7c13" name="time" x="84" y="238">
      <params/>
      <attribs/>
   </obj>
   <obj type="conv/interp" uuid="d68c1a8709d8b55e3de8715d727ec0a2d8569d9a" name="interp_4" x="168" y="238">
      <params/>
      <attribs/>
   </obj>
   <obj type="patch/inlet i" uuid="f11927f00c59219df0c50f73056aa19f125540b7" name="range" x="84" y="308">
      <params/>
      <attribs/>
   </obj>
   <obj type="kfilter/lowpass" uuid="4f0d68b39b6f6b1c1d371b028d84391d14062d68" name="lowpass_3" x="1008" y="336">
      <params>
         <frac32.s.map name="freq" value="32.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_3" x="1120" y="336">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="617f3119-c3e3-425b-9b0b-d78b203691b2" name="Select" x="518" y="364">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="617f3119-c3e3-425b-9b0b-d78b203691b2">
         <inlets>
            <int32 name="i1"/>
            <bool32 name="mute"/>
         </inlets>
         <outlets>
            <int32 name="o1"/>
            <int32 name="o2"/>
            <int32 name="o3"/>
            <int32 name="o4"/>
            <int32 name="o5"/>
            <int32 name="o6"/>
            <int32 name="o7"/>
            <int32 name="o8"/>
            <int32 name="o9"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[if(!inlet_mute && inlet_i1 == 0) { 
	outlet_o1 = 64; 
}
else { 
	outlet_o1 = 0;
}

if(!inlet_mute && inlet_i1 == 1) { 
	outlet_o2 = 64; 
}
else { 
	outlet_o2 = 0;
}


if(!inlet_mute && inlet_i1 == 2) { 
	outlet_o3 = 64; 
}
else { 
	outlet_o3 = 0;
}


if(!inlet_mute && inlet_i1 == 3) { 
	outlet_o4 = 64; 
}
else { 
	outlet_o4 = 0;
}

if(!inlet_mute && inlet_i1 == 4) { 
	outlet_o5 = 64; 
}
else { 
	outlet_o5 = 0;
}

if(!inlet_mute && inlet_i1 == 5) { 
	outlet_o6 = 64; 
}
else { 
	outlet_o6 = 0;
}

if(!inlet_mute && inlet_i1 == 6) { 
	outlet_o7 = 64; 
}
else { 
	outlet_o7 = 0;
}

if(!inlet_mute && inlet_i1 == 7) { 
	outlet_o8 = 64; 
}
else { 
	outlet_o8 = 0;
}

if(!inlet_mute && inlet_i1 == 8) { 
	outlet_o9 = 64; 
}
else { 
	outlet_o9 = 0;
}]]></code.krate>
      </object>
   </patchobj>
   <obj type="patch/inlet b" uuid="3b0d3eacb5bb978cb05d1372aa2714d5a4790844" name="clearBuffer" x="84" y="378">
      <params/>
      <attribs/>
   </obj>
   <obj type="kfilter/lowpass" uuid="4f0d68b39b6f6b1c1d371b028d84391d14062d68" name="lowpass_4" x="1008" y="462">
      <params>
         <frac32.s.map name="freq" value="32.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_4" x="1120" y="462">
      <params/>
      <attribs/>
   </obj>
   <obj type="kfilter/lowpass" uuid="4f0d68b39b6f6b1c1d371b028d84391d14062d68" name="lowpass_5" x="1008" y="588">
      <params>
         <frac32.s.map name="freq" value="32.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_5" x="1120" y="588">
      <params/>
      <attribs/>
   </obj>
   <obj type="kfilter/lowpass" uuid="4f0d68b39b6f6b1c1d371b028d84391d14062d68" name="lowpass_6" x="1008" y="714">
      <params>
         <frac32.s.map name="freq" value="32.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_6" x="1120" y="714">
      <params/>
      <attribs/>
   </obj>
   <obj type="kfilter/lowpass" uuid="4f0d68b39b6f6b1c1d371b028d84391d14062d68" name="lowpass_7" x="1008" y="840">
      <params>
         <frac32.s.map name="freq" value="32.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_7" x="1120" y="840">
      <params/>
      <attribs/>
   </obj>
   <obj type="kfilter/lowpass" uuid="4f0d68b39b6f6b1c1d371b028d84391d14062d68" name="lowpass_8" x="1008" y="966">
      <params>
         <frac32.s.map name="freq" value="32.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_8" x="1120" y="966">
      <params/>
      <attribs/>
   </obj>
   <obj type="kfilter/lowpass" uuid="4f0d68b39b6f6b1c1d371b028d84391d14062d68" name="lowpass_9" x="1008" y="1078">
      <params>
         <frac32.s.map name="freq" value="32.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_9" x="1120" y="1078">
      <params/>
      <attribs/>
   </obj>
   <nets>
      <net>
         <source obj="+_2" outlet="out"/>
         <dest obj="echo" inlet="in"/>
      </net>
      <net>
         <source obj="vca_1" outlet="o"/>
         <dest obj="+_9" inlet="in1"/>
      </net>
      <net>
         <source obj="vca_2" outlet="o"/>
         <dest obj="+_9" inlet="in2"/>
      </net>
      <net>
         <source obj="vca_3" outlet="o"/>
         <dest obj="+_9" inlet="in3"/>
      </net>
      <net>
         <source obj="vca_4" outlet="o"/>
         <dest obj="+_9" inlet="in4"/>
      </net>
      <net>
         <source obj="vca_5" outlet="o"/>
         <dest obj="+_9" inlet="in5"/>
      </net>
      <net>
         <source obj="vca_6" outlet="o"/>
         <dest obj="+_9" inlet="in6"/>
      </net>
      <net>
         <source obj="vca_7" outlet="o"/>
         <dest obj="+_9" inlet="in7"/>
      </net>
      <net>
         <source obj="vca_8" outlet="o"/>
         <dest obj="+_9" inlet="in8"/>
      </net>
      <net>
         <source obj="echo" outlet="out1"/>
         <dest obj="vca_1" inlet="a"/>
      </net>
      <net>
         <source obj="echo" outlet="out2"/>
         <dest obj="vca_2" inlet="a"/>
      </net>
      <net>
         <source obj="echo" outlet="out3"/>
         <dest obj="vca_3" inlet="a"/>
      </net>
      <net>
         <source obj="echo" outlet="out4"/>
         <dest obj="vca_4" inlet="a"/>
      </net>
      <net>
         <source obj="echo" outlet="out5"/>
         <dest obj="vca_5" inlet="a"/>
      </net>
      <net>
         <source obj="echo" outlet="out6"/>
         <dest obj="vca_6" inlet="a"/>
      </net>
      <net>
         <source obj="echo" outlet="out7"/>
         <dest obj="vca_7" inlet="a"/>
      </net>
      <net>
         <source obj="echo" outlet="out8"/>
         <dest obj="vca_8" inlet="a"/>
      </net>
      <net>
         <source obj="vca_9" outlet="o"/>
         <dest obj="+_9" inlet="in9"/>
      </net>
      <net>
         <source obj="echo" outlet="out9"/>
         <dest obj="vca_9" inlet="a"/>
      </net>
      <net>
         <source obj="+_9" outlet="out"/>
         <dest obj="audio_output" inlet="outlet"/>
      </net>
      <net>
         <source obj="audio_input" outlet="inlet"/>
         <dest obj="+_2" inlet="in1"/>
      </net>
      <net>
         <source obj="fb_rtn" outlet="inlet"/>
         <dest obj="+_2" inlet="in2"/>
      </net>
      <net>
         <source obj="range" outlet="inlet"/>
         <dest obj="Select" inlet="i1"/>
         <dest obj="echo" inlet="range"/>
      </net>
      <net>
         <source obj="Select" outlet="o9"/>
         <dest obj="lowpass_1" inlet="in"/>
      </net>
      <net>
         <source obj="interp_4" outlet="o"/>
         <dest obj="echo" inlet="time"/>
      </net>
      <net>
         <source obj="time" outlet="inlet"/>
         <dest obj="interp_4" inlet="i"/>
      </net>
      <net>
         <source obj="lowpass_1" outlet="out"/>
         <dest obj="vca_1" inlet="v"/>
      </net>
      <net>
         <source obj="lowpass_2" outlet="out"/>
         <dest obj="vca_2" inlet="v"/>
      </net>
      <net>
         <source obj="Select" outlet="o8"/>
         <dest obj="lowpass_2" inlet="in"/>
      </net>
      <net>
         <source obj="lowpass_3" outlet="out"/>
         <dest obj="vca_3" inlet="v"/>
      </net>
      <net>
         <source obj="Select" outlet="o7"/>
         <dest obj="lowpass_3" inlet="in"/>
      </net>
      <net>
         <source obj="lowpass_4" outlet="out"/>
         <dest obj="vca_4" inlet="v"/>
      </net>
      <net>
         <source obj="Select" outlet="o6"/>
         <dest obj="lowpass_4" inlet="in"/>
      </net>
      <net>
         <source obj="lowpass_5" outlet="out"/>
         <dest obj="vca_5" inlet="v"/>
      </net>
      <net>
         <source obj="Select" outlet="o5"/>
         <dest obj="lowpass_5" inlet="in"/>
      </net>
      <net>
         <source obj="lowpass_6" outlet="out"/>
         <dest obj="vca_6" inlet="v"/>
      </net>
      <net>
         <source obj="Select" outlet="o4"/>
         <dest obj="lowpass_6" inlet="in"/>
      </net>
      <net>
         <source obj="lowpass_7" outlet="out"/>
         <dest obj="vca_7" inlet="v"/>
      </net>
      <net>
         <source obj="Select" outlet="o3"/>
         <dest obj="lowpass_7" inlet="in"/>
      </net>
      <net>
         <source obj="lowpass_8" outlet="out"/>
         <dest obj="vca_8" inlet="v"/>
      </net>
      <net>
         <source obj="Select" outlet="o2"/>
         <dest obj="lowpass_8" inlet="in"/>
      </net>
      <net>
         <source obj="lowpass_9" outlet="out"/>
         <dest obj="vca_9" inlet="v"/>
      </net>
      <net>
         <source obj="Select" outlet="o1"/>
         <dest obj="lowpass_9" inlet="in"/>
      </net>
      <net>
         <source obj="echo" outlet="blink"/>
         <dest obj="blink" inlet="outlet"/>
      </net>
      <net>
         <source obj="clearBuffer" outlet="inlet"/>
         <dest obj="Select" inlet="muteAll"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
      <MidiChannel>1</MidiChannel>
      <NPresets>0</NPresets>
      <NPresetEntries>0</NPresetEntries>
      <NModulationSources>0</NModulationSources>
      <NModulationTargetsPerSource>0</NModulationTargetsPerSource>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>0</x>
      <y>25</y>
      <width>2560</width>
      <height>1415</height>
   </windowPos>
</patch-1.0>